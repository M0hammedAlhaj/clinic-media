package com.spring.clinicmedia.infrastructure;

import com.spring.clinicmedia.domain.exception.VirusDetectedException;
import com.spring.clinicmedia.domain.FileMalwareScanner;
import org.springframework.stereotype.Service;

import java.io.*;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

@Service
public class ClamAvFileMalwareScannerService implements FileMalwareScanner {

    private final static String HOST = "127.0.0.1";
    private final static int PORT = 3310;
    private final static String OPERATION_CLAIM = "zINSTREAM\0";

    @Override
    public void scan(byte[] fileBytes) throws IOException {
        try (
                Socket socket = new Socket(HOST, PORT);
                OutputStream out = socket.getOutputStream();
                InputStream in = socket.getInputStream()
        ) {

            sendInstreamCommand(out);

            sendData(out, fileBytes);

            finishSendData(out);

            String response = readResponse(in);

            validateResponse(response);

        } catch (IOException e) {
            throw new IOException("Error communicating with ClamAV", e);
        }
    }

    private void sendData(OutputStream out, byte[] fileBytes) throws IOException {
        int offset = 0;
        while (offset < fileBytes.length) {
            int chunkSize = Math.min(1024, fileBytes.length - offset);

            // Write chunk size
            byte[] sizeBytes = ByteBuffer
                    .allocate(4)
                    .putInt(chunkSize)
                    .array();
            out.write(sizeBytes);

            // Write chunk data
            out.write(fileBytes, offset, chunkSize);
            out.flush();

            offset += chunkSize;
        }
    }

    private void finishSendData(OutputStream out) throws IOException {
        out.write(new byte[]{0, 0, 0, 0});  // EOF marker
        out.flush();
    }

    private void sendInstreamCommand(OutputStream out) throws IOException {
        out.write(OPERATION_CLAIM.getBytes(StandardCharsets.US_ASCII));
        out.flush();
    }

    private String readResponse(InputStream in) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.US_ASCII));
        String response = reader.readLine();

        if (response == null) {
            throw new IOException("No response received from ClamAV");
        }

        return response.replace("stream: ", "").trim();
    }

    private void validateResponse(String cleanResult) {

        if (!cleanResult.equalsIgnoreCase("ok")) {
            throw new VirusDetectedException("Malicious content detected â€” upload rejected.");
        }
    }


}





